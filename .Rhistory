scale_y_log10() +
theme(legend.position="none",
axis.text.x = element_text(angle = 90))
}
CRSprop <- transform_sample_counts(CRS, function(x) x/sum(x) * 100)
NonCRSprop <- transform_sample_counts(nonCRS, function(x) x/sum(x) * 100)
dataProp <- transform_sample_counts(data, function(x) x/sum(x)*100)
dataLog <- transform_sample_counts(data, function(x) log(1 + x))
TopTaxPropPlotCRS <- plot_abundance(dataProp, Facet = "Genus", Color = "DIAG_CRS")
TopTaxPropPlotCRS
clinicalData <- data.frame(sample_data(data))
clinicalData
dataPhylumPropMeltFESS <- data %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
filter(Abundance > 0)
ggboxplot(dataPhylumPropMeltFESS, x = as.character("DIAG_CRS"), y = "Abundance",
facet.by = "Phylum",
scales = "free",
palette = "npg",
) +
stat_compare_means(method = "wilcox.test", size = 3) +
scale_y_log10() +
theme_pubr(base_size = 10)
Actino <- data %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
filter(Abundance > 0,
Phylum == "Actinobacteria")
ActinoDIAGboxplot <- ggboxplot(Actino, x = "DIAG_CRS", y = "Abundance",
fill = "#FF0037",
) +
stat_compare_means(method = "wilcox.test", size = 5, label = "p.signif") +
scale_y_log10() +
labs(x = "", y = "") +
theme_pubr(base_size = 10) +
theme(legend.position  = "",
plot.margin = margin(0,1,0,0, "cm"))
ActinoDIAGboxplot
ActinoFESS <- filter(Actino, !is.na(SINUS_FACTORS_PRIORFESS),
DIAG_CRS == "CRS") %>%
mutate(SINUS_FACTORS_PRIORFESS = ifelse(SINUS_FACTORS_PRIORFESS == 1, "Yes",
ifelse(SINUS_FACTORS_PRIORFESS == 0, "No", NA)))
# New levels for axis order
ActinoFESS$SINUS_FACTORS_PRIORFESS = factor(ActinoFESS$SINUS_FACTORS_PRIORFESS, levels=c("Yes","No"))
ActinoFESSboxplot <- ggboxplot(ActinoFESS, x = as.character("SINUS_FACTORS_PRIORFESS"), y = "Abundance",
fill = "#FF0037",
palette = "npg",
) +
stat_compare_means(method = "wilcox.test", size = 5, label = "p.signif") +
scale_y_log10() +
labs(x = "", y = "") +
theme_pubr(base_size = 10) +
theme(legend.position  = "",
plot.margin = margin(0,1,0,0, "cm"))
ActinoFESSboxplot
ActinoGrid <- plot_grid(ActinoDIAGboxplot, ActinoFESSboxplot, ncol = 2, align = "hv", rel_widths = c(1, 1))
ActinoGrid
ggsave(ActinoGrid,
filename = "16S_output/figures/ActinoBoxplotGrid.pdf",
device = "pdf",
bg = "transparent",
height = 2,
width = 5,
useDingbats = FALSE)
ActinoSNOT20Scatter <- ggscatter(Actino, x = "SNOT20_TOTAL", y = "Abundance",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
shape = "DIAG_CRS",
palette = "npg",
) +
ggtitle("Actinobacteria Abundance and SNOT22 Scores") +
labs(x = "SNOT20 Total", y = "Relative Abundance (%)") +
scale_y_log10() +
theme_pubr(base_size = 10) +
stat_cor(method = "spearman")  # Add correlation coefficient
ActinoSNOT20Scatter
Coryne <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Corynebacterium")
CoryneFESS <- filter(Coryne, !is.na(SINUS_FACTORS_PRIORFESS),
DIAG_CRS == "CRS")
CoryneFESSboxplot <- ggboxplot(CoryneFESS, x = as.character("SINUS_FACTORS_PRIORFESS"), y = "Abundance",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = as.character("SINUS_FACTORS_PRIORFESS"),
add = "jitter",
palette = "npg",
title = "Corynebacterium abundance \nin patients with prior FESS"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("No","Yes")) +
labs(x = "Prior FESS", y = "Relative Abundance (%)") +
theme_pubr(base_size = 10) +
theme(legend.position  = "")
CoryneFESSboxplot
CoryneSNOT20Scatter <- ggscatter(Coryne, x = "SNOT20_TOTAL", y = "Abundance",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
shape = "DIAG_CRS",
palette = "npg",
) +
ggtitle("Corynebacterium Abundance and SNOT22 Scores") +
labs(x = "SNOT20 Total", y = "Relative Abundance (%)") +
scale_y_log10() +
theme_pubr(base_size = 10) +
stat_cor(method = "spearman")  # Add correlation coefficient
CoryneSNOT20Scatter
Rothia <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Rothia")
Cuti <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Cutibacterium")
CutiDIAGboxplot <- ggboxplot(Cuti, x = "DIAG_CRS", y = "Abundance",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = "DIAG_CRS",
add = "jitter",
palette = "npg",
title = "Cutibacterium abundance and \nCRS diagnosis"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("CRS","Non-CRS")) +
labs(x = "", y = "Relative Abundance (%)") +
theme(legend.position  = "") +
theme_pubr(base_size = 10)
CutiDIAGboxplot
Dolo <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Dolosigranulum")
AnaerobesDF <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus %in% Anaerobes)
AnaerobesGroupSum <- AnaerobesDF %>%
group_by(DIAG_CRS, SAMPLE_NAME) %>%
dplyr::summarise(SumAnaerobes = sum(Abundance),
MeanAnaerobes = mean(Abundance))
AnaerobeSumDIAGboxplot <- ggboxplot(AnaerobesGroupSum, x = "DIAG_CRS", y = "MeanAnaerobes",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = "DIAG_CRS",
add = "jitter",
palette = "npg",
title = "Anaerobe abundance and \nCRS diagnosis"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("CRS","Non-CRS")) +
labs(x = "", y = "Relative Abundance (%)") +
theme(legend.position  = "") +
theme_pubr(base_size = 10)
AnaerobeSumDIAGboxplot
Strep <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus %in% "Streptococcus")
StrepDIAGboxplot <- ggboxplot(Strep, x = "DIAG_CRS", y = "Abundance",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = "DIAG_CRS",
add = "jitter",
palette = "npg",
title = "Streptococcus abundance \nand CRS diagnosis"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("CRS","Non-CRS")) +
labs(x = "", y = "Relative Abundance (%)") +
theme(legend.position  = "") +
theme_pubr(base_size = 10)
StrepDIAGboxplot
StrepSNOT20Scatter <- ggscatter(Strep, x = "SNOT20_TOTAL", y = "Abundance",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
shape = "DIAG_CRS",
palette = "npg",
) +
ggtitle("Streptococcus Abundance and SNOT22 Scores") +
labs(x = "SNOT20 Total", y = "Relative Abundance (%)") +
scale_y_log10() +
theme_pubr(base_size = 10) +
stat_cor(method = "spearman")  # Add correlation coefficient
StrepSNOT20Scatter
ActinoBactFuso_df <- data  %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
filter(Abundance > 0,
Phylum %in% c("Actinobacteria","Bacteroidetes","Fusobacteria")) %>%
select(DIAG_CRS, SAMPLE_NAME, Phylum, Abundance) %>%
pivot_wider(names_from = Phylum, values_from = Abundance) %>%
mutate(logActino = log(Actinobacteria),
logBact = log(Bacteroidetes),
logFuso = log(Fusobacteria))
ActinoBactScatter <- ggscatter(ActinoBactFuso_df, x = "Bacteroidetes", y = "Actinobacteria",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
#color = "DIAG_CRS",
palette = "npg",           # Color by groups "cyl"
) +
scale_y_log10() +
scale_x_log10() +
stat_cor(method = "spearman")
ActinoFusoScatter <- ggscatter(ActinoBactFuso_df, x = "Fusobacteria", y = "Actinobacteria",
add = "reg.line",
conf.int = TRUE,
palette = "npg",
) +
scale_y_log10() +
scale_x_log10() +
stat_cor(method = "spearman")
ActinoBactFuso_grid <- plot_grid(ActinoBactScatter, ActinoFusoScatter, ncol = 2, align = 'hv')
ActinoBactFuso_grid
ggsave(ActinoBactFuso_grid,
filename = "16S_output/figures/ActinoBactFusoScatterGrid.pdf",
device = "pdf",
width = 6, height = 3,
useDingbats = FALSE)
heatmap.obj <- amp_heatmap(ampvis.obj,
group_by = "DIAG_CRS",
facet_by = "DIAG_CRS",
tax_aggregate = "Genus",
plot_values = TRUE,
#tax_add = "Phylum",
tax_show = 30,
plot_colorscale = "log10",
normalise = TRUE,
#order_x_by = "hclust",
color_vector = c("whitesmoke", "pink"),
) +
theme_minimal(base_size = 10) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
heatmap.obj
ActinoDIAGboxplot <- ggboxplot(Actino, x = "DIAG_CRS", y = "Abundance",
fill = "#FF0037",
) +
stat_compare_means(method = "wilcox.test", size = 5, label = "p.format") +
scale_y_log10() +
labs(x = "", y = "") +
theme_pubr(base_size = 10) +
theme(legend.position  = "",
plot.margin = margin(0,1,0,0, "cm"))
ActinoDIAGboxplot
ActinoFESS <- filter(Actino, !is.na(SINUS_FACTORS_PRIORFESS),
DIAG_CRS == "CRS") %>%
mutate(SINUS_FACTORS_PRIORFESS = ifelse(SINUS_FACTORS_PRIORFESS == 1, "Yes",
ifelse(SINUS_FACTORS_PRIORFESS == 0, "No", NA)))
# New levels for axis order
ActinoFESS$SINUS_FACTORS_PRIORFESS = factor(ActinoFESS$SINUS_FACTORS_PRIORFESS, levels=c("Yes","No"))
ActinoFESSboxplot <- ggboxplot(ActinoFESS, x = as.character("SINUS_FACTORS_PRIORFESS"), y = "Abundance",
fill = "#FF0037",
palette = "npg",
) +
stat_compare_means(method = "wilcox.test", size = 5, label = "p.format") +
scale_y_log10() +
labs(x = "", y = "") +
theme_pubr(base_size = 10) +
theme(legend.position  = "",
plot.margin = margin(0,1,0,0, "cm"))
ActinoFESSboxplot
library(tidyverse)
.cran_packages <- c("tidyverse","gridExtra", "devtools",
"adaptiveGPCA", "ade4", "vegan",
"devtools", "ggthemes", "naniar",
"scales", "extrafont", "data.table",
"ggpubr", "cowplot")
.bioc_packages <- c("phyloseq", "BiocStyle","Biobase")
# Install CRAN packages (if not already installed)
.inst <- .cran_packages %in% installed.packages()
if (any(!.inst)){
install.packages(.cran_packages[!.inst],repos = "http://cran.rstudio.com/")
}
.inst <- .bioc_packages %in% installed.packages()
if (any(!.inst)){
BiocManager::install(.bioc_packages[!.inst], quietly = FALSE)
}
# Load packages into session, and print package version
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
sapply(c(.cran_packages, .bioc_packages), package.version)
library(ampvis2)
# Rarified filtered data used in ordination and picrust
data <- readRDS("16S_output/phyloseq_unsupervised_filtered_rare.rds")
data
samdf <- data.frame(sample_data(data)) %>%
select(SAMPLE_NAME, everything())
sample_data(data) <- samdf
CRS <- subset_samples(data, DIAG_CRS == "CRS") %>% filter_taxa(.,function(x) sum(x) > 0, TRUE)
CRS
nonCRS <- subset_samples(data, DIAG_CRS == "Non-CRS") %>% filter_taxa(.,function(x) sum(x) > 0, TRUE)
nonCRS
CRS.phy <- tax_glom(CRS, taxrank = "Phylum")
tax.count.CRS <-
data.frame(taxa_sums(CRS.phy), tax_table(CRS.phy)[, 2])
rownames(tax.count.CRS) = NULL
colnames(tax.count.CRS)[1] <- c("Abundance")
tax.count.CRS$Percent <-
round(tax.count.CRS$Abundance / sum(tax.count.CRS$Abundance) * 100, 4)
library(plyr)
Phylum_df <-
tax.count.CRS[with(tax.count.CRS, order(-Percent)),]
#how much do the top 5 phyla contribute to total abundance?
top5PhyCRS <- Phylum_df[1:5,]
round(sum(top5PhyCRS$Percent), 2)
top5PhyCRS
nonCRS.phy <- tax_glom(nonCRS, taxrank = "Phylum")
tax.count.nonCRS <-
data.frame(taxa_sums(nonCRS.phy), tax_table(nonCRS.phy)[, 2])
rownames(tax.count.nonCRS) = NULL
colnames(tax.count.nonCRS)[1] <- c("Abundance")
tax.count.nonCRS$Percent <-
round(tax.count.nonCRS$Abundance / sum(tax.count.nonCRS$Abundance) * 100,
4)
library(plyr)
Phylum_df <-
tax.count.nonCRS[with(tax.count.nonCRS, order(-Percent)),]
#how much do the top 5 phyla contribute to total abundance?
top5PhyNonCRS <- Phylum_df[1:5,]
round(sum(top5PhyNonCRS$Percent), 2)
top5PhyNonCRS
#What is the number of Genera found?
length(get_taxa_unique(CRS, taxonomic.rank="Genus"))
#what are the abundance levels of each genus?
CRS.genus <- tax_glom(CRS, taxrank = "Genus")
tax.count.CRS <-
data.frame(tax_table(CRS.genus)[, 2:6], taxa_sums(CRS.genus))
rownames(tax.count.CRS) = NULL
colnames(tax.count.CRS) <-
c("Phylum", "Class", "Order", "Family", "Genus", "Abundance")
tax.count.CRS$Percent <-
round(tax.count.CRS$Abundance / sum(tax.count.CRS$Abundance) * 100, 4)
Genus_df_CRS <-
tax.count.CRS[with(tax.count.CRS, order(-Percent)),]
#how much do the top 10 genera contribute to total abundance?
top10GeneraCRS <- Genus_df_CRS[1:10,]
round(sum(top10GeneraCRS$Percent), 3)
###How diverse are the top 10 genera? i.e., how many species are there per genus?
top10GeneraCRS <- as.vector(Genus_df_CRS$Genus[1:10])
Diversity.list.CRS <- vector("list", 10)
names(Diversity.list.CRS) <- top10GeneraCRS
for (i in 1:length(top10GeneraCRS)) {
physub = subset_taxa(CRS, Genus == top10GeneraCRS[i])
physub = prune_taxa(taxa_sums(physub) > 0, physub)
Diversity.list.CRS[[i]] <- physub
}
#compute the number of taxa in each element of the list
NtaxaCRS <- data.frame(unlist(lapply(Diversity.list.CRS, ntaxa)))
colnames(NtaxaCRS) <- "N.Species"
#Make a table with percent abundance and number of taxa
genus.tab.CRS <- data.frame(Genus_df_CRS[1:10, ], NtaxaCRS)
genus.tab.CRS
#What is the number of Genera found?
length(get_taxa_unique(nonCRS, taxonomic.rank="Genus"))
#what are the abundance levels of each genus?
nonCRS.genus <- tax_glom(nonCRS, taxrank = "Genus")
tax.count.nonCRS <-
data.frame(tax_table(nonCRS.genus)[, 2:6], taxa_sums(nonCRS.genus))
rownames(tax.count.nonCRS) = NULL
colnames(tax.count.nonCRS) <-
c("Phylum", "Class", "Order", "Family", "Genus",  "Abundance")
tax.count.nonCRS$Percent <-
round(tax.count.nonCRS$Abundance / sum(tax.count.nonCRS$Abundance) * 100,
4)
library(plyr)
Genus_df_nonCRS <-
tax.count.nonCRS[with(tax.count.nonCRS, order(-Percent)),]
#how much do the top 10 genera contribute to total abundance?
top10GeneraNonCRS <- Genus_df_nonCRS[1:10,]
round(sum(top10GeneraNonCRS$Percent), 3)
###How diverse are the top 10 genera? i.e., how many species are there per genus?
top10GeneraNonCRS <- as.vector(Genus_df_nonCRS$Genus[1:10])
Diversity.list.nonCRS <- vector("list", 10)
names(Diversity.list.nonCRS) <- top10GeneraNonCRS
for (i in 1:length(top10GeneraNonCRS)) {
physub = subset_taxa(nonCRS, Genus == top10GeneraNonCRS[i])
physub = prune_taxa(taxa_sums(physub) > 0, physub)
Diversity.list.nonCRS[[i]] <- physub
}
#compute the number of taxa in each element of the list
NtaxaNonCRS <-
data.frame(unlist(lapply(Diversity.list.nonCRS, ntaxa)))
colnames(NtaxaNonCRS) <- "N.Species"
#Make a table with percent abundance and number of taxa
genus.tab.nonCRS <- data.frame(Genus_df_nonCRS[1:10, ], NtaxaNonCRS)
genus.tab.nonCRS
dataPhylumPropMelt <- data %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt()
# Make anything with an abundance less than 1% "Other"
dataPhylumPropMelt$Phylum <- as.character(dataPhylumPropMelt$Phylum)
dataPhylumPropMelt <- mutate(dataPhylumPropMelt, PhylumOther = ifelse(Abundance < 1, "Other < 1%", Phylum))
bugcolors <- read_csv("CRS_Taxa_Colors.csv")
dataPhylumPropMelt <- left_join(dataPhylumPropMelt, bugcolors, by = c("PhylumOther" = "Taxon")) %>%
select(SAMPLE_NAME, DIAG_CRS, SINUS_FACTORS_NUMFESS, SINUS_FACTORS_PRIORFESS, contains("ABX"), Phylum, PhylumOther, Abundance, Color)
#Separate CRS and non CRS datasets, arrange, and get sample names for plotting
dataPhylumPropMeltCRS <- dataPhylumPropMelt %>%
filter(DIAG_CRS == "CRS") %>%
dplyr::arrange(DIAG_CRS, PhylumOther, desc(Abundance))
dataPhylumPropMeltNonCRS <- dataPhylumPropMelt %>%
filter(DIAG_CRS == "Non-CRS") %>%
dplyr::arrange(DIAG_CRS, PhylumOther, desc(Abundance))
orderXCRS <- unique(dataPhylumPropMeltCRS$SAMPLE_NAME)
labelsXCRS <- unique(dataPhylumPropMeltCRS$SAMPLE_NAME)
orderXNonCRS <- unique(dataPhylumPropMeltNonCRS$SAMPLE_NAME)
labelsXNonCRS <- unique(dataPhylumPropMeltNonCRS$SAMPLE_NAME)
colorTax <- unique(dataPhylumPropMeltCRS$PhylumOther)
colorHex <- unique(dataPhylumPropMeltCRS$Color)
barplot.phylum.prop.CRS <- ggplot(data=dataPhylumPropMeltCRS, aes(x = SAMPLE_NAME, y = Abundance, fill = PhylumOther)) +
geom_bar(aes(), stat="identity", position="stack") +
scale_x_discrete(limits = orderXCRS,
labels = labelsXCRS) +
theme_minimal(base_size = 14) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(color = "black"),
plot.margin = margin(0,0,0,0, "cm"),
panel.grid = element_blank()) +
scale_fill_manual(breaks = colorTax, values = colorHex)
barplot.phylum.prop.CRS
colorTaxNonCRS <- unique(dataPhylumPropMeltNonCRS$PhylumOther)
colorHexNonCRS <- unique(dataPhylumPropMeltNonCRS$Color)
barplot.phylum.prop.NonCRS <- ggplot(data=dataPhylumPropMeltNonCRS, aes(x = SAMPLE_NAME, y = Abundance, fill = PhylumOther)) +
geom_bar(aes(), stat="identity", position="stack") +
scale_x_discrete(limits = orderXNonCRS,
labels = labelsXNonCRS) +
theme_minimal(base_size = 14) +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(color = "black"),
plot.margin = margin(0,0,0,0, "cm"),
panel.grid = element_blank()) +
scale_fill_manual(breaks = colorTaxNonCRS, values = colorHexNonCRS)
barplot.phylum.prop.NonCRS
Phylum.Prop.Legend <- get_legend(barplot.phylum.prop.CRS)
Phylum.Prop.Grid <- plot_grid(barplot.phylum.prop.CRS + theme(legend.position = ""),
barplot.phylum.prop.NonCRS + theme(legend.position = ""),
Phylum.Prop.Legend, nrow = 1, rel_widths = c(4, 1.5, 1))
Phylum.Prop.Grid
ggsave(Phylum.Prop.Grid,
filename = "16S_output/figures/PhylumPropBarGrid.pdf",
device = "pdf",
height = 8,
width = 25)
Phylum.prop <- data %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
filter(Abundance > 0)
p <- ggboxplot(Phylum.prop,
x = "DIAG_CRS", y = "Abundance",
add = "jitter",
facet.by = "Phylum",
scales = "free"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10()
p
#Combine OTU abundance table and taxonomy table from the phyloseq object "my_phyloseq_object":
obj <- data
# Make short names for OTUs - facilitates later plotting ease when amp_heatmap has the option tax_empty = "best" (for some reason)
taxa_names(obj) <- paste0("ASV", seq(ntaxa(obj)))
# Fix OTU table layout for exporting. taxa_as_rows = FALSE was not working.
Totu_table =t(otu_table(obj))
otu_table(obj)=Totu_table
#export OTU table from phyloseq object
otutable <- data.frame(OTU = rownames(phyloseq::otu_table(obj)@.Data),
phyloseq::otu_table(obj)@.Data,
phyloseq::tax_table(obj)@.Data,
check.names = FALSE
)
otutable <- otutable %>% select(-OTU,
-TaxName, # Remove special taxa formatting
-Genus_Species2, # Remove special taxa formatting
-DB)
#Extract metadata from the phyloseq object:
metadata <- data.frame(phyloseq::sample_data(obj),
check.names = FALSE
)
metadata <- rownames_to_column(metadata, var = "SAMPLE_ID")
# Extract phylogenetic tree from phyloseq object:
#phytree <- phyloseq::phy_tree(obj)
#Load the data with amp_load:
ampvis.obj <- amp_load(otutable, metadata#,
#tree = phytree
)
ampvis.obj
# Split inot two datasets for CRS and Non-CRS samples
ampvis.CRS <- amp_subset_samples(ampvis.obj, DIAG_CRS == "CRS")
ampvis.CRS
ampvis.NonCRS <- amp_subset_samples(ampvis.obj, DIAG_CRS == "Non-CRS")
ampvis.NonCRS
View(obj)
