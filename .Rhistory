coord_fixed(ratio = 2/1)
heatmap.NonCRS
heatmap.NonCRS.df <- amp_heatmap(ampvis.NonCRS,
textmap = TRUE,
tax_show = 15,
tax_aggregate = "Genus",
plot_values = FALSE,
normalise = TRUE,
order_x_by = "cluster",
)
heatmap.NonCRS.df
#ggsave(heatmap.NonCRS,
#       filename = "16S_output/figures/taxaHeatPlotNonCRS.pdf",
#       device = "pdf",
#       height = 3.0)
heatmap.NonCRS.df.meanRA <- heatmap.NonCRS.df %>%
rownames_to_column("Genus") %>%
pivot_longer(-Genus, names_to = "Sample", values_to = "RA") %>%
group_by(Genus) %>%
dplyr::summarise(meanRA = mean(RA)) %>%
dplyr::arrange(desc(meanRA))
# Make a barplot
meanRAbarNonCRS <- ggplot(heatmap.NonCRS.df.meanRA, aes(x = reorder(Genus,meanRA), y = meanRA)) +
geom_col(fill = "lightgrey", color = "white", width = 1) +
coord_flip() +
theme_minimal(base_size = 10) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(color = "black"),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank())
meanRAbarNonCRS
#ggsave(meanRAbarNonCRS, filename = "16S_output/figures/meanRAbarplotNonCRS.pdf",
#       device ="pdf",
#       height = 3.1,
#       width = 0.8)
heatmap_grid <- plot_grid(heatmap.CRS, meanRAbarCRS, heatmap.NonCRS, meanRAbarNonCRS,
nrow = 1,
align = "hv",
rel_widths = c(3,1,3,1))
heatmap_grid
heatmap.obj <- amp_heatmap(ampvis.obj,
group_by = "DIAG_CRS",
facet_by = "DIAG_CRS",
tax_aggregate = "Genus",
plot_values = TRUE,
#tax_add = "Phylum",
tax_show = 30,
plot_colorscale = "log10",
normalise = TRUE,
#order_x_by = "hclust",
color_vector = c("whitesmoke", "pink"),
) +
theme_minimal(base_size = 10) +
theme(axis.text.x = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
heatmap.obj
top20genera.df <- amp_heatmap(ampvis.obj,
textmap = TRUE,
tax_aggregate = "Genus",
tax_show = 20,
plot_values = FALSE,
normalise = TRUE
)
top20generaNames <- rownames(top20genera.df)
top20generaNames
CRS.taxname <- tax_glom(CRS, "TaxName")
CRS.taxname
nonCRS.taxname <- tax_glom(nonCRS, "TaxName")
nonCRS.taxname
CRS.taxname.prop <- transform_sample_counts(CRS.taxname, function(x) x/sum(x) * 100)
nonCRS.taxname.prop <- transform_sample_counts(nonCRS.taxname, function(x) x/sum(x) * 100)
CRS.taxname.prop.melt <- psmelt(CRS.taxname.prop) %>%
#filter(Abundance > 0) #%>%
group_by(OTU, Phylum, Class, Order, Family, Genus, Species, TaxName) %>%
dplyr::summarize(avgRelAbun = mean(Abundance)) %>%
ungroup() %>%
select(TaxName, avgRelAbun)
dim(CRS.taxname.prop.melt)
nonCRS.taxname.prop.melt <- psmelt(nonCRS.taxname.prop) %>%
#filter(Abundance > 0) %>%
group_by(OTU, Phylum, Class, Order, Family, Genus, Species, TaxName) %>%
dplyr::summarize(avgRelAbun = mean(Abundance)) %>%
ungroup() %>%
select(TaxName, avgRelAbun)
dim(nonCRS.taxname.prop.melt)
# Compute prevalence of each feature, store as data.frame
prevdf.taxname.CRS = apply(X = otu_table(CRS.taxname),
MARGIN = ifelse(taxa_are_rows(CRS.taxname), yes = 1, no = 2),
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevdf.taxname.CRS = data.frame(Prevalence = prevdf.taxname.CRS,
Abundance = taxa_sums(CRS.taxname),
phyloseq::tax_table(CRS.taxname)@.Data) %>%
mutate(PercentAbundance = round(Abundance/sum(Abundance) * 100, 4)) %>%
rownames_to_column("ASV") %>%
left_join(CRS.taxname.prop.melt, by = "TaxName") %>%
column_to_rownames("ASV") %>%
select(Prevalence, Abundance, PercentAbundance, avgRelAbun, TaxName, everything(), DB) %>%
mutate(DIAG_CRS = "CRS")
dim(prevdf.taxname.CRS)
# Compute prevalence of each feature, store as data.frame
prevdf.taxname.nonCRS = apply(X = otu_table(nonCRS.taxname),
MARGIN = ifelse(taxa_are_rows(nonCRS.taxname), yes = 1, no = 2),
FUN = function(x){sum(x > 0)})
# Add taxonomy and total read counts to this data.frame
prevdf.taxname.nonCRS = data.frame(Prevalence = prevdf.taxname.nonCRS,
Abundance = taxa_sums(nonCRS.taxname),
phyloseq::tax_table(nonCRS.taxname)@.Data) %>%
mutate(PercentAbundance = round(Abundance/sum(Abundance) * 100, 4)) %>%
rownames_to_column("ASV") %>%
left_join(nonCRS.taxname.prop.melt, by = "TaxName") %>%
column_to_rownames("ASV") %>%
select(Prevalence, Abundance, PercentAbundance, avgRelAbun, TaxName, everything()) %>%
mutate(DIAG_CRS = "NonCRS")
prevdf.taxname.CRS.top20genera <- filter(prevdf.taxname.CRS, Genus %in% top20generaNames)
prevdf.taxname.nonCRS.top20genera <- filter(prevdf.taxname.nonCRS, Genus %in% top20generaNames)
prevdf.taxname.top20genera <- bind_rows(prevdf.taxname.CRS.top20genera, prevdf.taxname.nonCRS.top20genera) %>%
pivot_wider(id_cols = TaxName:Genus_Species2, names_from = DIAG_CRS, values_from = c("Prevalence","Abundance","PercentAbundance", "avgRelAbun")) %>%
select(Kingdom, Phylum, Class, Order, Family, Genus, Species, TaxName,
Prevalence_CRS, Prevalence_NonCRS, Abundance_CRS, Abundance_NonCRS,
PercentAbundance_CRS, PercentAbundance_NonCRS, avgRelAbun_CRS, avgRelAbun_NonCRS) %>%
arrange(Genus, TaxName)
taxname.db <- data.frame(tax_table(data))
taxname.db <- select(taxname.db, TaxName, DB) %>%
group_by(TaxName) %>%
dplyr::summarise(DB=paste(DB, collapse = "/")) %>%
ungroup() %>%
mutate(DB = ifelse(grepl("Both", DB), "Both",
ifelse(grepl("NA", DB), "NA",
ifelse(grepl("SILVA/SILVA",DB), "SILVA",
ifelse(grepl("HOMD/SILVA",DB), "Both",DB)))))
prevdf.taxname.top20genera.db <- left_join(prevdf.taxname.top20genera, taxname.db, by = "TaxName")
#write_csv(prevdf.taxname.top20genera.db,
#          "16S_output/top20PrevAbun.csv")
library(gt)
library(gtsummary)
library(webshot)
tab <- prevdf.taxname.top20genera.db %>%
select(Genus, TaxName, Prevalence_CRS, Prevalence_NonCRS, avgRelAbun_CRS, avgRelAbun_NonCRS, DB) %>%
gt(rowname_col = "TaxName", groupname_col = "Genus") %>%
fmt_number(columns = vars(avgRelAbun_CRS, avgRelAbun_NonCRS), decimals = 2) %>%
fmt_missing(columns = everything()) %>%
summary_rows(groups = TRUE,
columns = vars(Prevalence_CRS, Prevalence_NonCRS, avgRelAbun_CRS, avgRelAbun_NonCRS),
fns = list(Total = ~sum(., na.rm = TRUE)),
use_seps = FALSE) %>%
cols_align(align = "center", columns = vars(Prevalence_CRS, Prevalence_NonCRS, avgRelAbun_CRS, avgRelAbun_NonCRS, DB)) %>%
tab_stubhead(label = md("**Taxonomic Feature**")) %>%
tab_spanner(label = md("**Prevalence**"),
columns = vars(Prevalence_CRS, Prevalence_NonCRS)) %>%
tab_spanner(label = md("**Average % Abundance**"),
columns = vars(avgRelAbun_CRS, avgRelAbun_NonCRS)) %>%
cols_label(Prevalence_CRS = md("**CRS**"),
Prevalence_NonCRS = md("**Non-CRS**"),
avgRelAbun_CRS = md("**CRS**"),
avgRelAbun_NonCRS = md("**Non-CRS**"),
DB = md("**Database**")) %>%
tab_style(style = cell_text(size = px(9), color = "black", font = "arial"),
locations = cells_body(vars(Prevalence_CRS, Prevalence_NonCRS, avgRelAbun_CRS, avgRelAbun_NonCRS, DB))) %>%
tab_style(style = cell_text(size = px(9), color = "black", font = "arial"),
locations = cells_summary(groups = TRUE, rows = TRUE, columns = TRUE)) %>%
tab_style(style = cell_text(size = px(9), color = "black", font = "arial", style = "italic", weight = "bold"),
locations = cells_row_groups(groups = TRUE)) %>%
tab_style(style = cell_text(size = px(9), color = "black", font = "arial", style = "italic"),
locations = cells_stub(rows = TRUE)) %>%
tab_options(
table.font.size = 9,
table.font.names = "arial",
data_row.padding = px(2),
summary_row.padding = px(2),
row_group.padding = px(2),
table.border.top.style = "none",
table.border.bottom.style = "none",
table_body.border.top.style = "none",
table_body.border.bottom.style = "none",
)
tab
#gtsave(tab, filename = "16S_output/Top20prevAbundTable.pdf")
#write_csv(prevdf.taxname.top20genera, "16S_output/top20PrevAbun.csv")
Anaerobes <- c("Fusobacterium", "Prevotella", "Parvimonas", "Peptostreptococcus", "Cutibacterium", "Leptotrichia", "Anaerococcus","Peptoniphilus","Veillonella","Akkermansia","Finegoldia","Clostridium","Bacteroides","Porphyromonas","Actinomyces","Streptococcus","Selenomonas","Tannerella", "Dialister","Capnocytophaga", "Gemella","Eikenella", "Solobacterium", "Campylobacter","Atopobium", "Oribacterium","Treponema")
anaerobes.prop <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
subset_taxa(Genus %in% Anaerobes) %>%
psmelt()
p <- ggboxplot(anaerobes.prop,
x = "DIAG_CRS", y = "Abundance",
#add = "jitter",
facet.by = "Genus",
scales = "free"
) +
stat_compare_means(aes(group = DIAG_CRS), method = "wilcox.test") +
scale_y_log10()
p
plot_abundance = function(physeq,title = "",
Facet = "Genus", Color = "DIAG_CRS"){
# Arbitrary subset, based on Phylum, for plotting
p1f = subset_taxa(physeq, Phylum %in% c("Bacteroidetes","Fusobacteria"))
mphyseq = psmelt(p1f)
mphyseq <- subset(mphyseq, Abundance > 0)
ggplot(data = mphyseq, mapping = aes_string(x = "DIAG_CRS",y = "Abundance",
color = Color, fill = Color)) +
geom_boxplot(fill = NA) +
geom_point(size = 1, alpha = 0.3,
position = position_jitter(width = 0.3)) +
theme_minimal() +
facet_wrap(facets = Facet, scales = "free") +
scale_y_log10() +
theme(legend.position="none",
axis.text.x = element_text(angle = 90))
}
CRSprop <- transform_sample_counts(CRS, function(x) x/sum(x) * 100)
NonCRSprop <- transform_sample_counts(nonCRS, function(x) x/sum(x) * 100)
dataProp <- transform_sample_counts(data, function(x) x/sum(x)*100)
dataLog <- transform_sample_counts(data, function(x) log(1 + x))
TopTaxPropPlotCRS <- plot_abundance(dataProp, Facet = "Genus", Color = "DIAG_CRS")
TopTaxPropPlotCRS
clinicalData <- data.frame(sample_data(data))
clinicalData
dataPhylumPropMeltFESS <- data %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
filter(Abundance > 0)
ggboxplot(dataPhylumPropMeltFESS, x = as.character("DIAG_CRS"), y = "Abundance",
facet.by = "Phylum",
scales = "free",
palette = "npg",
) +
stat_compare_means(method = "wilcox.test", size = 3) +
scale_y_log10() +
theme_pubr(base_size = 10)
Actino <- data %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
filter(Abundance > 0,
Phylum == "Actinobacteria")
ActinoDIAGboxplot <- ggboxplot(Actino, x = "DIAG_CRS", y = "Abundance",
fill = "#FF0037",
) +
stat_compare_means(method = "wilcox.test", size = 5, label = "p.format") +
scale_y_log10() +
labs(x = "", y = "") +
theme_pubr(base_size = 10) +
theme(legend.position  = "",
plot.margin = margin(0,1,0,0, "cm"))
ActinoDIAGboxplot
ActinoFESS <- filter(Actino, !is.na(SINUS_FACTORS_PRIORFESS),
DIAG_CRS == "CRS") %>%
mutate(SINUS_FACTORS_PRIORFESS = ifelse(SINUS_FACTORS_PRIORFESS == 1, "Yes",
ifelse(SINUS_FACTORS_PRIORFESS == 0, "No", NA)))
# New levels for axis order
ActinoFESS$SINUS_FACTORS_PRIORFESS = factor(ActinoFESS$SINUS_FACTORS_PRIORFESS, levels=c("Yes","No"))
ActinoFESSboxplot <- ggboxplot(ActinoFESS, x = as.character("SINUS_FACTORS_PRIORFESS"), y = "Abundance",
fill = "#FF0037",
palette = "npg",
) +
stat_compare_means(method = "wilcox.test", size = 5, label = "p.format") +
scale_y_log10() +
labs(x = "", y = "") +
theme_pubr(base_size = 10) +
theme(legend.position  = "",
plot.margin = margin(0,1,0,0, "cm"))
ActinoFESSboxplot
ActinoGrid <- plot_grid(ActinoDIAGboxplot, ActinoFESSboxplot, ncol = 2, align = "hv", rel_widths = c(1, 1))
ActinoGrid
#ggsave(ActinoGrid,
#       filename = "16S_output/figures/ActinoBoxplotGrid.pdf",
#       device = "pdf",
#       bg = "transparent",
#      height = 2,
#       width = 5,
#       useDingbats = FALSE)
ActinoSNOT20Scatter <- ggscatter(Actino, x = "SNOT20_TOTAL", y = "Abundance",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
shape = "DIAG_CRS",
palette = "npg",
) +
ggtitle("Actinobacteria Abundance and SNOT22 Scores") +
labs(x = "SNOT20 Total", y = "Relative Abundance (%)") +
scale_y_log10() +
theme_pubr(base_size = 10) +
stat_cor(method = "spearman")  # Add correlation coefficient
ActinoSNOT20Scatter
Coryne <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Corynebacterium")
CoryneFESS <- filter(Coryne, !is.na(SINUS_FACTORS_PRIORFESS),
DIAG_CRS == "CRS")
CoryneFESSboxplot <- ggboxplot(CoryneFESS, x = as.character("SINUS_FACTORS_PRIORFESS"), y = "Abundance",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = as.character("SINUS_FACTORS_PRIORFESS"),
add = "jitter",
palette = "npg",
title = "Corynebacterium abundance \nin patients with prior FESS"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("No","Yes")) +
labs(x = "Prior FESS", y = "Relative Abundance (%)") +
theme_pubr(base_size = 10) +
theme(legend.position  = "")
CoryneFESSboxplot
CoryneSNOT20Scatter <- ggscatter(Coryne, x = "SNOT20_TOTAL", y = "Abundance",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
shape = "DIAG_CRS",
palette = "npg",
) +
ggtitle("Corynebacterium Abundance and SNOT22 Scores") +
labs(x = "SNOT20 Total", y = "Relative Abundance (%)") +
scale_y_log10() +
theme_pubr(base_size = 10) +
stat_cor(method = "spearman")  # Add correlation coefficient
CoryneSNOT20Scatter
Rothia <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Rothia")
Cuti <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Cutibacterium")
CutiDIAGboxplot <- ggboxplot(Cuti, x = "DIAG_CRS", y = "Abundance",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = "DIAG_CRS",
add = "jitter",
palette = "npg",
title = "Cutibacterium abundance and \nCRS diagnosis"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("CRS","Non-CRS")) +
labs(x = "", y = "Relative Abundance (%)") +
theme(legend.position  = "") +
theme_pubr(base_size = 10)
CutiDIAGboxplot
Dolo <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus == "Dolosigranulum")
AnaerobesDF <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus %in% Anaerobes)
AnaerobesGroupSum <- AnaerobesDF %>%
group_by(DIAG_CRS, SAMPLE_NAME) %>%
dplyr::summarise(SumAnaerobes = sum(Abundance),
MeanAnaerobes = mean(Abundance))
AnaerobeSumDIAGboxplot <- ggboxplot(AnaerobesGroupSum, x = "DIAG_CRS", y = "MeanAnaerobes",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = "DIAG_CRS",
add = "jitter",
palette = "npg",
title = "Anaerobe abundance and \nCRS diagnosis"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("CRS","Non-CRS")) +
labs(x = "", y = "Relative Abundance (%)") +
theme(legend.position  = "") +
theme_pubr(base_size = 10)
AnaerobeSumDIAGboxplot
Strep <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
psmelt() %>%
filter(Abundance > 0,
Genus %in% "Streptococcus")
StrepDIAGboxplot <- ggboxplot(Strep, x = "DIAG_CRS", y = "Abundance",
#color = as.character("SINUS_FACTORS_PRIORFESS"),
fill = "DIAG_CRS",
add = "jitter",
palette = "npg",
title = "Streptococcus abundance \nand CRS diagnosis"
) +
stat_compare_means(method = "wilcox.test") +
scale_y_log10() +
scale_x_discrete(labels = c("CRS","Non-CRS")) +
labs(x = "", y = "Relative Abundance (%)") +
theme(legend.position  = "") +
theme_pubr(base_size = 10)
StrepDIAGboxplot
StrepSNOT20Scatter <- ggscatter(Strep, x = "SNOT20_TOTAL", y = "Abundance",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
shape = "DIAG_CRS",
palette = "npg",
) +
ggtitle("Streptococcus Abundance and SNOT22 Scores") +
labs(x = "SNOT20 Total", y = "Relative Abundance (%)") +
scale_y_log10() +
theme_pubr(base_size = 10) +
stat_cor(method = "spearman")  # Add correlation coefficient
StrepSNOT20Scatter
ActinoBactFuso_df <- data  %>%
tax_glom("Phylum") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
filter(Abundance > 0,
Phylum %in% c("Actinobacteria","Bacteroidetes","Fusobacteria")) %>%
select(DIAG_CRS, SAMPLE_NAME, Phylum, Abundance) %>%
pivot_wider(names_from = Phylum, values_from = Abundance) %>%
mutate(logActino = log(Actinobacteria),
logBact = log(Bacteroidetes),
logFuso = log(Fusobacteria))
ActinoBactScatter <- ggscatter(ActinoBactFuso_df, x = "Bacteroidetes", y = "Actinobacteria",
add = "reg.line",                         # Add regression line
conf.int = TRUE,                          # Add confidence interval
#color = "DIAG_CRS",
palette = "npg",           # Color by groups "cyl"
) +
scale_y_log10() +
scale_x_log10() +
stat_cor(method = "spearman")
ActinoFusoScatter <- ggscatter(ActinoBactFuso_df, x = "Fusobacteria", y = "Actinobacteria",
add = "reg.line",
conf.int = TRUE,
palette = "npg",
) +
scale_y_log10() +
scale_x_log10() +
stat_cor(method = "spearman")
ActinoBactFuso_grid <- plot_grid(ActinoBactScatter, ActinoFusoScatter, ncol = 2, align = 'hv')
ActinoBactFuso_grid
#ggsave(ActinoBactFuso_grid,
#       filename = "16S_output/figures/ActinoBactFusoScatterGrid.pdf",
#       device = "pdf",
#       width = 6, height = 3,
#      useDingbats = FALSE)
write_csv(samdf, "~/Desktop/crs_sample_data.csv")
genus.data <- tax_glom(physeq = data, taxrank = "Genus")
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt()
View(dataGenusPropMelt)
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, Abundance) %>%
pivot_wider(-Kingdom:Genus, names_from = Sample, values_from = Abundance)
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, Abundance) %>%
pivot_wider(-Kingdom:Genus, names_from = Sample, values_from = round(Abundance, 2))
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, Abundance) %>%
pivot_wider(-Kingdom:Genus, names_from = Sample, values_from = round("Abundance", 2))
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>%
transform_sample_counts(function(x) x/sum(x) * 100) %>%
psmelt() %>%
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, Abundance) %>%
pivot_wider(-Kingdom:Genus, names_from = Sample, values_from = Abundance)
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>% # Combines ASVs by genus
transform_sample_counts(function(x) x/sum(x) * 100) %>% # Gets a percent abundance
psmelt() %>% # Creates a table
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, DIAG_CRS, Abundance, everything()) #%>%
write_csv(dataGenusPropMelt, "~/Desktop/CRS_genera_proportion_longform_sampledata.csv")
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>% # Combines ASVs by genus
transform_sample_counts(function(x) x/sum(x) * 100) %>% # Gets a percent abundance
psmelt() %>% # Creates a table
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, DIAG_CRS, Abundance, everything()) %>%
pivot_wider(-Kingdom:Genus, names_from = Sample, values_from = Abundance)
write_csv(dataGenusPropMelt, "~/Desktop/CRS_genera_proportion_wideform_nosampledata.csv")
dataGenusPropMeltCRS <- filter(DIAG_CRS == "CRS")
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>% # Combines ASVs by genus
transform_sample_counts(function(x) x/sum(x) * 100) %>% # Gets a percent abundance
psmelt() %>% # Creates long form table
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, DIAG_CRS, Abundance, everything())
dataGenusPropMeltWide <- pivot_wider(-Kingdom:Genus, names_from = Sample, values_from = Abundance) # Creates wide form table
dataGenusPropMelt <- data %>%
tax_glom("Genus") %>% # Combines ASVs by genus
transform_sample_counts(function(x) x/sum(x) * 100) %>% # Gets a percent abundance
psmelt() %>% # Creates long form table
select(Kingdom, Phylum, Class, Order, Family, Genus, Sample, DIAG_CRS, Abundance, everything())
dataGenusPropMeltWide <- pivot_wider(-Kingdom:Genus, names_from = Sample, values_from = Abundance) # Creates wide form table
dataGenusPropMeltWide <- pivot_wider(dataGenusPropMelt,-Kingdom:Genus, names_from = Sample, values_from = Abundance) # Creates wide form table
dataGenusPropMeltCRS <- filter(dataGenusPropMelt, DIAG_CRS == "CRS")
dataGenusPropMeltCRS <- filter(dataGenusPropMelt, DIAG_CRS == "CRS")
dataGenusPropMeltCRS <- pivot_wider(dataGenusPropMeltCRS,-Kingdom:Genus, names_from = Sample, values_from = Abundance)
dataGenusPropMeltCRS <- filter(dataGenusPropMelt, DIAG_CRS == "CRS")
dataGenusPropMeltCRSwide <- pivot_wider(dataGenusPropMeltCRS,-Kingdom:Genus, names_from = Sample, values_from = Abundance)
write_csv(dataGenusPropMeltCRS, "~/Desktop/CRS_genera_proportion_longform_sampledata.csv")
write_csv(dataGenusPropMeltCRSwide, "~/Desktop/CRS_genera_proportion_wideform_nosampledata.csv")
